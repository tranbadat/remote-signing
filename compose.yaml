services:
  mysql:
    image: mysql:8.0
    container_name: mysql
    hostname: mysql-keycloak
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: keycloak
      MYSQL_USER: keycloak
      MYSQL_PASSWORD: keycloak
      MYSQL_ROOT_HOST: '%'
      MYSQL_AUTHENTICATION_PLUGIN: mysql_native_password
    ports:
      - 3306:3306
    volumes:
      - mysql-data:/var/lib/mysql
    # copy the sql file init from /resources/init.sql to /docker-entrypoint-initdb.d/init.sql
    #      - ./resources/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - remote-signing-network
  keycloak:
    build:
      context: .
      dockerfile: docker-file/Dockerfile
    container_name: keycloak
    environment:
      - KEYCLOAK_ADMIN=admin
      - KEYCLOAK_ADMIN_PASSWORD=admin
      - KEYCLOAK_FRONTEND_URL=http://localhost:8080/admin
      - KC_HTTP_RELATIVE_PATH=/

    ports:
      - 8080:8080
    command:
      - start-dev
    volumes:
      - keycloak-data:/opt/jboss/keycloak/standalone/data
    networks:
      - remote-signing-network
    depends_on:
      - mysql

  vault-tls:
    image: hashicorp/vault:latest
    hostname: vault-tls
    environment:
      #      VAULT_CAPATH: /etc/vault/ca.crt
      VAULT_DEV_ROOT_TOKEN_ID: testtoken
    ports:
      - 8200:8200
    privileged: true
    volumes:
      #      - ./integrationTests/e2e-tls/configs:/etc/vault
      - vault-data:/var/lib/vault:rw
  #    entrypoint: vault server -config=/etc/vault/config.hcl

  redis:
    image: redis
    #    env_file: ../docker.env
    hostname: redis
    ports:
      - "6379:6379"
    volumes:
      - ./redis.conf:/redis.conf
    command: [ "redis-server", "/redis.conf" ]
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 30s
      retries: 3
    networks:
      - remote-signing-network

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_INTERNAL://kafka:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1

    ports:
      - "9092:9092"
    networks:
      - remote-signing-network
  kafka-ui:
    image: provectuslabs/kafka-ui
    container_name: kafka-ui
    ports:
      - "9999:8080"
    restart: always
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER=zookeeper: 2181
    depends_on:
      - kafka
    networks:
      - remote-signing-network

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - remote-signing-network

  s3:
    image: minio/minio:latest
    #    env_file: ../docker.env
    networks:
      - remote-signing-network
    ports:
      - "9000:9000"
      - "9001:9001"
    deploy:
      restart_policy:
        condition: on-failure
    volumes:
      - minio-data:/data
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://minio:9000/minio/health/live" ]
      interval: 30s
      timeout: 20s
      retries: 3
    environment:
      MINIO_ACCESS_KEY: minio
      MINIO_SECRET_KEY: minio123
    entrypoint: sh
    command: -c 'minio server --console-address ":9001" /data'

volumes:
  keycloak-data:
    driver: local
    driver_opts:
      type: 'none'
      o: 'bind'
      device: '/opt/keycloak/data' #or replace with your own path
  mysql-data:
    driver: local
    driver_opts:
      type: 'none'
      o: 'bind'
      device: '/var/lib/mysql' #or replace with your own path
  vault-data:
  #
  #  redis-data:
  #    driver: local
  #    driver_opts:
  #      type: 'none'
  #      o: 'bind'
  #      device: '/opt/redis/data' # or replace with your own path
  #  s3-data:
  minio-data:
    driver: local
    driver_opts:
      type: 'none'
      o: 'bind'
      device: '/opt/minio/data' # or replace with your own path
networks:
  remote-signing-network:
    driver: bridge